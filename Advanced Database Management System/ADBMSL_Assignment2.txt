> use Company
switched to db Company

> db.createCollection("customer")
{ "ok" : 1 }

> db.customer.insert([
... {
...     "_id" : ObjectId("54265694517b30434f6a2bdc"),
...     "custID" : "A123",
...     "Amount" : 500,
...     "status" : "A"
... },
... {
...     "_id" : ObjectId("542656eb517b30434f6a2bdd"),
...     "custID" : "A123",
...     "Amount" : 250,
...     "status" : "A"
... },
... {
...     "_id" : ObjectId("54265726517b30434f6a2bde"),
...     "custID" : "B212",
...     "Amount" : 200,
...     "status" : "A"
... },
... {
...     "_id" : ObjectId("54265757517b30434f6a2bdf"),
...     "custID" : "A123",
...     "Amount" : 300,
...     "status" : "D"
... }])
BulkWriteResult({
        "writeErrors" : [ ],
        "writeConcernErrors" : [ ],
        "nInserted" : 4,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
})


// Part A
// a) Find the total amount of each customer.
> db.customer.aggregate([
...     { $group : { _id : "$custID", total : { $sum : "$Amount" } } }
... ])
{ "_id" : "A123", "total" : 1050 }
{ "_id" : "B212", "total" : 200 }


// b) Find the total amount of each customer whose status is A.
> db.customer.aggregate([
...     { $match : { status : "A" } },
...     { $group : { _id : "$custID", total : { $sum : "$Amount" } } }
... ])
{ "_id" : "A123", "total" : 750 }
{ "_id" : "B212", "total" : 200 }

// c) Find the minimum total amount of each customer whose Status is A.
> db.customer.aggregate([
...     { $match : { status : "A" } },
...     { $group : { _id : "$custID", min_total : { $min : "$Amount"} } }
... ])
{ "_id" : "A123", "min_total" : 250 }
{ "_id" : "B212", "min_total" : 200 }

// d) Find the maximum total amount of each customer whose Status is A.
> db.customer.aggregate([
...     { $match : { status : "A" } },
...     { $group : { _id : "$custID", max_total : { $max : "$Amount" } } }
... ])
{ "_id" : "A123", "max_total" : 500 }
{ "_id" : "B212", "max_total" : 200 }

// e) Find the average total amount of each customer whose Status is A.
> db.customer.aggregate([
...     { $match : { status : "A" } },
...     { $group : { _id : "$custID", avg_total : { $avg : "$Amount" } } }
... ])
{ "_id" : "A123", "avg_total" : 375 }
{ "_id" : "B212", "avg_total" : 200 }


// Part B
// f) Create index on custID.
> db.customer.createIndex({ custID : 1 })
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}

// g) Execute getIndexes.
> db.customer.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_"
        },
        {
                "v" : 2,
                "key" : {
                        "custID" : 1
                },
                "name" : "custID_1"
        }
]

// h) Drop the index created.
> db.customer.dropIndex({ custID : 1 })
{ "nIndexesWas" : 2, "ok" : 1 }
